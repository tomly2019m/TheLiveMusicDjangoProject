class LiveMusicWebsocket {
    constructor(t, s, e) {
        this.vm = t, this.extend = s, this.group_id = e, this.ws = new WebSocket(`${"http:" === window.location.protocol ? "ws:" : "wss:"}//${window.location.hostname}${window.location.port ? ":" + window.location.port : ""}/ws/` + e), 
        this.on_open(), this.on_close(), this.on_error(), this.on_message();
    }
    on_open() {
        this.ws.onopen = () => {
            console.log("已连接"), this.heartbeat_id = setInterval(() => {
                this.send_heartbeat();
            }, 2e4);
        };
    }
    on_close() {
        this.ws.onclose = () => {
            clearInterval(this.heartbeat_id), console.log("连接断开"), console.log("连接断开，尝试重连"), 
            setTimeout(() => {
                this.ws = new WebSocket(`${"http:" === window.location.protocol ? "ws:" : "wss:"}//${window.location.hostname}${window.location.port ? ":" + window.location.port : ""}/ws/` + this.group_id), 
                this.on_open(), this.on_error(), this.on_message(), this.try_flag = !1;
            }, 2e3);
        };
    }
    on_error() {
        this.ws.onerror = () => {
            this.vm.$data.information = "发生错误, 请刷新浏览器源", console.log("发生错误");
        };
    }
    on_message() {
        this.ws.onmessage = t => {
            t = JSON.parse(t.data);
            const s = t.content;
            switch (console.log(t), t.type) {
              case "start_getting":
                this.extend.is_running_control(this.vm, this.extend, s);
                break;

              case "next_music":
                this.extend.music_info_list_control(this.vm, this.extend, s), this.extend.music_url_control(this.vm, this.extend, s);
                try {
                    this.extend.lyric_control(this.vm, this.extend, s);
                } catch (t) {}
                setTimeout(() => {
                    this.extend.base_control(this.vm, this.extend, s);
                }, 2e3);
                break;

              case "play":
              case "who_play":
              case "replay":
                this.extend.base_control(this.vm, this.extend, s);
                break;

              case "add_music":
                this.extend.music_info_list_control(this.vm, this.extend, s);
                break;

              case "console_info":
                this.extend.console_info_control(this.vm, this.extend, s);
            }
        };
    }
    send_heartbeat() {
        try {
            this.ws.send(`{"type": "heartbeat", "content": {"group_id": "${this.group_id}"}}`);
        } catch (t) {
            this.on_close();
        }
    }
    start_getting() {
        var t = {
            url: this.vm.$data.url,
            data: Number(!Boolean(vm.$data.start_flag)),
            where: this.vm.$data.where
        };
        this.ws.send(JSON.stringify({
            type: "start_getting",
            content: t
        }));
    }
    next_music() {
        var t = {
            url: this.vm.$data.url
        };
        this.vm.$data.where ? t.where = this.vm.$data.where : t.where = this.vm.$data.who_i_am ? "lyric" : "music", 
        this.ws.send(JSON.stringify({
            type: "next_music",
            content: t
        }));
    }
    base_status(t, s) {
        s = {
            url: this.vm.$data.url,
            data: s,
            where: t,
            where_url: this.vm.$data.who_i_am ? "lyric" : "music"
        };
        this.ws.send(JSON.stringify({
            type: "play",
            content: s
        }));
    }
    play_pause() {
        this.vm.$data.play_icon_flag = this.vm.$data.play_icon_flag ? 0 : 1, this.base_status("play", this.vm.$data.play_icon_flag);
    }
    replay_music() {
        this.base_status("replay", 1);
    }
    change_who_play() {
        var t = $("[name='switch']:eq(0)").prop("checked");
        this.base_status("who_play", !t);
    }
    del_music(t, s, e, i) {
        this.ws.send(JSON.stringify({
            type: "del_music",
            content: {
                url: t,
                where: s,
                music_name: e,
                artist: i
            }
        }));
    }
    move_music(t, s, e) {
        t = {
            url: this.vm.$data.url,
            music_name: t,
            artist: s,
            index: e
        };
        this.vm.$data.where ? t.where = this.vm.$data.where : t.where = this.vm.$data.who_i_am ? "lyric" : "music", 
        this.ws.send(JSON.stringify({
            type: "move_music",
            content: t
        }));
    }
}