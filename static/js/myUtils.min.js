class MyUtils {
    n = 0;
    last = "";
    is_play = 0;
    who_play;
    global_time = 0;
    global_time_flag = !0;
    global_time_break_flag = !1;
    htmlAudioElement = new Audio("");
    constructor() {}
    load_QRCode_b64(t) {
        let e = t.$data.QRCode_key;
        t.$data.QRCode_b64_style = "", t.$data.QRCode_load_flag = !0, t.$data.QRCode_login_status[e] ? (t.$data.QRCode_load_flag = !1, 
        t.$data.QRCode_b64_style = "") : $.getJSON({
            qq: "qq-music-qr-code",
            ku_wo: "ku-wo-music-qr-code",
            cloud: "cloud-music-qr-code"
        }[e], {
            secret: t.$data.secret
        }, async a => {
            t.$data.QRCode_b64_style = "background-image: url(data:image/jpg;base64," + a.base64 + ");", 
            t.$data.QRCode_load_flag = !1;
            for (let a = 0; a < 20; a++) if (await this.delayTime(5e3), this.get_login_status(t), 
            t.$data.QRCode_login_status[e] || !t.$data.login_mask) {
                t.$data.login_mask = !1, t.$data.QRCode_key = "", t.$data.QRCCode_selected_style[e] = "";
                break;
            }
        });
    }
    get_login_status(t) {
        let e = t.$data.QRCode_key;
        $.getJSON("get-qr-status", {
            secret: t.$data.secret
        }, a => {
            console.log(a), t.$data.QRCode_login_status = a, t.$data.QRCode_login_status[e] && (t.$data.QRCode_b64_style = "");
        });
    }
    set_login_status(t) {
        $.getJSON("set-qr-status", {
            secret: t.$data.secret,
            platform: t.$data.QRCode_key,
            value: !1
        }, a => {
            console.log(a), a.data && (t.$data.QRCode_login_status[t.$data.QRCode_key] = !1, 
            this.load_QRCode_b64(t));
        });
    }
    change_QRCode(a, t) {
        a.$data.QRCode_key = t, a.$data.QRCCode_selected_style = {
            qq: "",
            cloud: "",
            ku_wo: ""
        }, a.$data.QRCCode_selected_style[t] = "background-color: #b5b5b5;", a.$data.QRCode_where = {
            qq: "QQ音乐",
            cloud: "网易云音乐",
            ku_wo: "酷我音乐"
        }[t], this.load_QRCode_b64(a);
    }
    show_logged(a) {}
    change_display_css(a) {
        console.log("主题 " + a.$data.theme_id), a.$data.set_flag || (a.$data.display_style = "border: none;box-shadow: none;"), 
        a.$data.display_style += "width: " + a.$data.v_div_width + "px; height: " + a.$data.v_div_height + 'px; border-image: url("' + a.$data.theme_url[a.$data.theme_id] + '") stretch; border-image-slice: ' + a.$data.border_image_slice[a.$data.theme_id] + " fill; border-image-width: " + a.$data.border_image_width[a.$data.theme_id] + "px; border-image-outset: " + a.$data.border_image_outset[a.$data.theme_id] + "px;";
    }
    change_first_css(a) {
        a.$data.first_style = "font-family: " + a.$data.v_first_font + "; font-size: " + a.$data.v_first_font_size + "px; color: " + a.$data.v_first_color + "; text-shadow: " + this.generate_text_shadow(a.$data.first_shadow_blur, a.$data.first_shadow_color, a.$data.first_shadow_num);
    }
    change_second_css(a) {
        a.$data.second_style = "font-family: " + a.$data.v_second_font + "; font-size: " + a.$data.v_second_font_size + "px; color: " + a.$data.v_second_color + "; text-shadow: " + this.generate_text_shadow(a.$data.second_shadow_blur, a.$data.second_shadow_color, a.$data.second_shadow_num);
    }
    change_now_css(a) {
        a.$data.now_style = "font-family: " + a.$data.v_now_font + "; font-size: " + a.$data.v_now_font_size + "px; color: " + a.$data.v_now_color + "; text-shadow: " + this.generate_text_shadow(a.$data.now_shadow_blur, a.$data.now_shadow_color, a.$data.now_shadow_num);
    }
    generate_text_shadow(e, s, _) {
        if (_ = parseInt(_), e = parseInt(e), 0 === _) return "";
        var l = [];
        for (let t = -_; t <= _; t += Math.ceil(_ / 4)) for (let a = -_; a <= _; a += Math.ceil(_ / 4)) l.push(t + "px " + a + "px " + e + "px " + s);
        return l.join(",") + ";";
    }
    change_li_css(a) {
        a.$data.li_style = "margin: 0 0 " + a.$data.v_li_margin + "px 0;", console.log(this.global_time_break_flag), 
        this.global_time_break_flag || this.test_lyric(a), this.global_time_break_flag = !0;
    }
    change_theme(a, t) {
        a.$data.theme_id = parseInt(t);
    }
    use_get(e, a) {
        let t;
        var s = {
            where: a,
            secret: e.$data.secret,
            theme_id: e.$data.theme_id,
            black_user_list: JSON.stringify(e.$data.black_user_list),
            div_width: e.$data.v_div_width,
            div_height: e.$data.v_div_height,
            v_li_margin: e.$data.v_li_margin
        };
        switch (a) {
          case "music":
            t = {
                music_color: e.$data.v_first_color,
                music_font: e.$data.v_first_font,
                music_font_size: e.$data.v_first_font_size,
                artist_color: e.$data.v_second_color,
                artist_font: e.$data.v_second_font,
                artist_font_size: e.$data.v_second_font_size,
                music_shadow_num: e.$data.first_shadow_num,
                music_shadow_blur: e.$data.first_shadow_blur,
                music_shadow_color: e.$data.first_shadow_color,
                artist_shadow_num: e.$data.second_shadow_num,
                artist_shadow_blur: e.$data.second_shadow_blur,
                artist_shadow_color: e.$data.second_shadow_color
            };
            break;

          case "lyric":
            t = {
                original_text_color: e.$data.v_first_color,
                original_text_font: e.$data.v_first_font,
                original_text_font_size: e.$data.v_first_font_size,
                translation_color: e.$data.v_second_color,
                translation_font: e.$data.v_second_font,
                translation_font_size: e.$data.v_second_font_size,
                now_color: e.$data.v_now_color,
                now_font: e.$data.v_now_font,
                now_font_size: e.$data.v_now_font_size,
                original_shadow_num: e.$data.first_shadow_num,
                original_shadow_blur: e.$data.first_shadow_blur,
                original_shadow_color: e.$data.first_shadow_color,
                translation_shadow_num: e.$data.second_shadow_num,
                translation_shadow_blur: e.$data.second_shadow_blur,
                translation_shadow_color: e.$data.second_shadow_color,
                now_shadow_num: e.$data.now_shadow_num,
                now_shadow_blur: e.$data.now_shadow_blur,
                now_shadow_color: e.$data.now_shadow_color
            };
        }
        a = {
            ...s,
            ...t
        }, console.log(a), $.ajaxSettings.timeout = "3000", $.get("/from-bili?", a, (a, t) => {
            "success" === t ? this.change_load_info(e, !0, "sus") : this.change_load_info(e, !0, "fail", t);
        });
    }
    use_get_global(a, t) {
        $.get("/add-global-setting", {
            secret: a.$data.secret,
            where: t,
            data: JSON.stringify("black_user_list" === t ? a.$data.black_user_list : a.$data.black_music_list)
        });
    }
    push_black(a, t) {
        var e = {
            music: {
                music_name: a.$data.black_music.music_name,
                artist: a.$data.black_music.artist
            },
            user: {
                nick: a.$data.black_user.nick,
                uid: a.$data.black_user.uid
            }
        }, s = {
            music: [ "music_name", "artist" ],
            user: [ "nick", "uid" ]
        };
        null == e[t][s[t][0]] && null == e[t][s[t][1]] ? console.log("无内容") : (a.$data["black_" + t + "_list"].push(e[t]), 
        a.$data["black_" + t] = {}, a.$data.mask1_1 = !1, a.$data.mask2_1 = !1);
    }
    sumV2(a, t) {
        return [ ...new Set([ ...a, ...t ]) ];
    }
    create_time_list(a) {
        var t = [], e = document.getElementsByClassName("item"), s = e.length;
        for (const _ of e) t.push(_.id);
        return {
            lis_len: s,
            time_list: t
        };
    }
    show_now_lyric(a, t, e, s) {
        if (a < t && parseFloat(e[a][0]) <= s && s <= parseFloat(e[a][1]) + 1) {
            var _;
            for (_ of document.getElementsByClassName("item")) _.getElementsByClassName("original")[0].style.cssText = vm.$data.first_style;
            document.getElementById(e[a][0]).getElementsByClassName("original")[0].style.cssText = vm.$data.now_style, 
            this.change(vm), a++;
        }
        return a;
    }
    music_play(a, t, e) {
        let s = 0;
        const _ = this, {
            lis_len: l,
            time_list: o
        } = "lyric" === e && this.create_time_list(e);
        "lyric" === e && (this.n = 3 * (parseInt(a.$data.v_li_margin) + parseInt(a.$data.li_height)), 
        this.change(a)), this.htmlAudioElement = new Audio(t), this.htmlAudioElement.play().then(() => {
            this.is_play = 1, console.log(this), console.log(this.is_play);
        }), this.htmlAudioElement.addEventListener("timeupdate", function() {
            "lyric" === e && (s = _.show_now_lyric(s, l, o, this.currentTime));
        }), this.htmlAudioElement.addEventListener("ended", () => {
            $.get("/next_music", {
                url: a.$data.url,
                where: e
            });
        });
    }
    music_play1(s, t) {
        let _ = ("lyric" === t && this.create_time_list(t))["time_list"];
        "lyric" === t && (this.n = 3 * (parseInt(s.$data.v_li_margin) + parseInt(s.$data.li_height)), 
        this.change(s)), this.htmlAudioElement.play().then(() => {
            this.is_play = 1, console.log(this), console.log(this.is_play);
        }), this.htmlAudioElement.ontimeupdate = () => {
            if ("lyric" === t) for (let t = 0; t < _.length; t++) {
                var a, e = _[t];
                if (this.htmlAudioElement.currentTime >= e) {
                    console.log(e), _ = _.slice(t + 1, _.length);
                    for (a of document.getElementsByClassName("item")) a.getElementsByClassName("original")[0].style.cssText = s.$data.first_style;
                    document.getElementById(e).getElementsByClassName("original")[0].style.cssText = s.$data.now_style;
                    for (let a = 0; a <= t; a++) this.change(s);
                }
            }
        }, this.htmlAudioElement.onended = () => {
            this.is_play = 0, $.get("/next_music", {
                url: s.$data.url,
                where: t
            });
        };
    }
    change(a) {
        this.n -= 90 + parseInt(a.$data.v_li_margin), document.getElementById("uls").style.transform = "translateY(" + this.n + "px)";
    }
    get_base_control(a, t) {
        return {
            which_data_list: [ "replay", "who_play", "play_status" ],
            callback_list: [ t.base_control ]
        };
    }
    get_music_info_list(a, t) {
        return {
            which_data_list: [ "music_name_list" ],
            callback_list: [ t.music_info_list_control ]
        };
    }
    get_music_url(a, t) {
        return {
            which_data_list: [ "now_music_url" ],
            callback_list: [ t.music_url_control ]
        };
    }
    get_lyric(a, t) {
        return {
            which_data_list: [ "lyric_name" ],
            callback_list: [ t.lyric_control ]
        };
    }
    get_is_running(a, t) {
        return {
            which_data_list: [ "is_running" ],
            callback_list: [ t.is_running_control ]
        };
    }
    get_console_info(a, t) {
        return {
            which_data_list: [ "console_info" ],
            callback_list: [ t.console_info_control ]
        };
    }
    get_who_play(a, t) {
        return {
            which_data_list: [ "who_play" ],
            callback_list: [ t.who_play_control ]
        };
    }
    get_user_playlist(a, t) {
        return {
            which_data_list: [ "user_playlist" ],
            callback_list: [ t.set_idle_playlist ]
        };
    }
    base_control(a, t, e) {
        console.log(e), a.$data.who_play = e.who_play, a.$data.play_icon_flag = e.play_status;
        var s = e.who_play === a.$data.who_i_am, _ = (console.log("is_play: " + t.is_play), 
        0 === e.who_play ? "music" : "lyric");
        e.play_status && !t.is_play && s ? t.music_play1(a, _) : !e.play_status && t.is_play && s && (t.htmlAudioElement.pause(), 
        t.is_play = 0), e.replay && s && (t.htmlAudioElement.load(), t.music_play1(a, _), 
        t.update_play_data(a, "replay", 0));
    }
    music_info_list_control(a, t, e) {
        console.log(e);
        var e = e.music_name_list, s = e[0];
        const _ = [];
        e.forEach(a => {
            _.push(a.file_name);
        }), a.$data.music_info = _, void 0 !== s && void 0 !== s.file_name ? t.is_empty(s.file_name[0]) ? $.get("/next_music", {
            url: a.$data.url,
            where: a.$data.who_i_am ? "lyric" : "music"
        }) : a.$data.now_music_name = s.file_name.join(", ") : (a.$data.music_info = [ [ "暂无歌曲", "无" ] ], 
        a.$data.now_music_name = "", t.htmlAudioElement.src = "", t.is_play = 0);
    }
    lyric_control(a, t, e) {
        console.log(e);
        var s = e.lyric_name;
        let _;
        try {
            _ = s[0].id;
        } catch (a) {
            _ = null;
        }
        t.is_empty(_) ? a.$data.lyric_info = [ {
            id: 0,
            original: "暂无歌词",
            translation: "no find lyric"
        } ] : (t.is_has_field({
            A: {
                a: "b"
            }
        }, "a"), a.$data.lyric_info = e.lyric_name);
    }
    music_url_control(a, t, e) {
        console.log(e), t.htmlAudioElement.pause(), t.htmlAudioElement.src = e.now_music_url, 
        "" === e.now_music_url && (e = 0 === e.who_play ? "music" : "lyric", $.get("/next_music", {
            url: a.$data.url,
            where: e
        })), t.is_play = 0;
    }
    is_running_control(a, t, e) {
        e = e.is_running;
        console.log(e), e ? (a.$data.start_flag = !0, a.$data.start_getting_text = "停止统计") : (a.$data.start_flag = !1, 
        a.$data.start_getting_text = "开始统计");
    }
    who_play_control(a, t, e) {
        e = e.who_play;
        console.log(e), $("[name='switch']:eq(0)").prop("checked", !e);
    }
    console_info_control(a, t, e) {
        e = e.console_info;
        console.log(e), a.$data.console_info = e;
    }
    get_data(e, s, a, _) {
        var t = e.$data.who_i_am ? "lyric" : "music";
        $.getJSON("get_data", {
            url: e.$data.url,
            where: t,
            which_data: JSON.stringify(a)
        }, t => {
            _.forEach(a => {
                a(e, s, t);
            });
        });
    }
    get_union_data(t, e, a) {
        let s = [], _ = [];
        a.forEach(a => {
            a = a(t, e);
            s = [ ...s, ...a.callback_list ], _ = [ ..._, ...a.which_data_list ];
        }), this.get_data(t, e, _, s);
    }
    is_empty(t) {
        try {
            return "" === t.trim();
        } catch (a) {
            return null == t;
        }
    }
    is_has_field(a, t) {
        let e = !1;
        if ("object" == typeof a) for (const s in a) {
            if (s === t) {
                e = !0;
                break;
            }
            if (a[s] === t) {
                e = !0;
                break;
            }
            e = this.is_has_field(a[s], t);
        }
        return e;
    }
    from_sever_get_data(t, e) {
        $.getJSON("/get_data", {
            url: t.$data.url,
            where: e
        }, a => {
            console.log(this.is_play), this.do_some_command(t, a, e);
        });
    }
    do_some_command(t, e, a) {
        console.log(e), console.log(this.last);
        let s;
        var _ = e.data.play_, l = e.data.replay, o = e.data.lyric_name, i = e.data.is_running, d = e.data.now_music_url, n = e.data.music_name_list, r = e.data.global_setting, c = e.data.user_set;
        switch (a) {
          case "lyric":
            t.$data.theme_id = parseInt(c.theme_id), t.$data.v_div_width = parseInt(c.div_width), 
            t.$data.v_div_height = parseInt(c.div_height), t.$data.v_first_color = c.original_text_color, 
            t.$data.v_first_font = c.original_text_font, t.$data.v_first_font_size = parseInt(c.original_text_font_size), 
            t.$data.v_second_color = c.translation_color, t.$data.v_second_font = c.translation_font, 
            t.$data.v_second_font_size = parseInt(c.translation_font_size), t.$data.v_now_color = c.now_color, 
            t.$data.v_now_font = c.now_font, t.$data.v_now_font_size = parseInt(c.now_font_size), 
            t.$data.v_li_margin = c.v_li_margin, t.$data.now_shadow_num = parseInt(c.now_shadow_num), 
            t.$data.now_shadow_blur = parseInt(c.now_shadow_blur), t.$data.now_shadow_color = c.now_shadow_color, 
            t.$data.first_shadow_num = parseInt(c.original_shadow_num), t.$data.first_shadow_blur = parseInt(c.original_shadow_blur), 
            t.$data.first_shadow_color = c.original_shadow_color, t.$data.second_shadow_num = parseInt(c.translation_shadow_num), 
            t.$data.second_shadow_blur = parseInt(c.translation_shadow_blur), t.$data.second_shadow_color = c.translation_shadow_color;
            break;

          case "music":
            t.$data.theme_id = parseInt(c.theme_id), t.$data.v_div_width = parseInt(c.div_width), 
            t.$data.v_div_height = parseInt(c.div_height), t.$data.v_first_color = c.music_color, 
            t.$data.v_first_font = c.music_font, t.$data.v_first_font_size = parseInt(c.music_font_size), 
            t.$data.v_second_color = c.artist_color, t.$data.v_second_font = c.artist_font, 
            t.$data.v_second_font_size = parseInt(c.artist_font_size), t.$data.v_li_margin = parseInt(c.v_li_margin), 
            t.$data.first_shadow_num = parseInt(c.music_shadow_num), t.$data.first_shadow_blur = parseInt(c.music_shadow_blur), 
            t.$data.first_shadow_color = c.music_shadow_color, t.$data.second_shadow_num = parseInt(c.artist_shadow_num), 
            t.$data.second_shadow_blur = parseInt(c.artist_shadow_blur), t.$data.second_shadow_color = c.artist_shadow_color;
        }
        t.$data.who_play = e.data.who_play, t.$data.black_user_list = r.black_user_list, 
        t.$data.black_music_list = r.black_music_list;
        e = [ {
            id: 0,
            original: "暂无歌词",
            translation: "no find lyric"
        } ];
        try {
            null != o[0].id ? t.$data.lyric_info = o : t.$data.lyric_info = e, t.$data.music_url = d, 
            t.$data.stop_flag = i;
        } catch (a) {
            t.$data.lyric_info = e, t.$data.music_url = d, t.$data.stop_flag = i;
        }
        console.log(n);
        try {
            s = JSON.parse(JSON.stringify([ n[0] ]));
        } catch (a) {
            s = [];
        }
        switch (!s.equals([ void 0 ]) && !s.equals([ [ "", "" ] ]) || n.equals([]) || (s = [], 
        $.get("/next_music", {
            url: t.$data.url,
            where: a
        })), console.log("vm.now_music_name: " + t.$data.now_music_name), console.log("now_music_name: " + s), 
        _ && !this.is_play && ("music" === a ? 0 === t.$data.who_play : 1 === t.$data.who_play) && this.htmlAudioElement.play().then(() => {
            this.is_play = 1;
        }), a) {
          case "music":
            t.$data.who_play && this.is_play && (this.htmlAudioElement.pause(), 
            this.is_play = 0), n.equals([]) && (console.log("暂无歌曲"), t.$data.music_info = [ [ "暂无歌曲", "无" ] ], 
            console.log(t.$data.music_info));
            break;

          case "lyric":
            !t.$data.who_play && this.is_play && (this.htmlAudioElement.pause(), 
            this.is_play = 0);
        }
        l && this.is_play && ($.get("/play", {
            url: t.$data.url,
            data: 0,
            where: "replay",
            where_url: a + "_url"
        }), this.htmlAudioElement.load(), this.htmlAudioElement.play().then(() => {
            this.is_play = 1;
        }), this.n = 2 * (parseInt(t.$data.v_li_margin) + parseInt(t.$data.li_height)), 
        this.change(t)), _ || (this.htmlAudioElement.pause(), this.is_play = 0), 
        t.$data.now_music_name = s.join(","), n.equals([]) ? t.$data.music_info = [ [ "暂无歌曲", "无" ] ] : t.$data.music_info = n;
    }
    prepare_to_music_play(a, t, e) {
        var s = a.$data.now_music_name;
        if (this.htmlAudioElement.pause(), "" === s) $.get("/next_music", {
            url: a.$data.url,
            where: e
        }), "lyric" === e && (this.n = 2 * (parseInt(a.$data.v_li_margin) + parseInt(a.$data.li_height)), 
        this.change(a)); else {
            try {
                this.htmlAudioElement.pause(), this.is_play = 0;
            } catch (a) {
                console.log();
            }
            switch (e) {
              case "music":
                setTimeout(() => {
                    ("music" === e ? 0 === a.$data.who_play : 1 === a.$data.who_play) && this.music_play(a, t, "music");
                }, 2e3);
                break;

              case "lyric":
                setTimeout(() => {
                    ("music" === e ? 0 === a.$data.who_play : 1 === a.$data.who_play) && this.music_play(a, t, "lyric");
                }, 2e3);
            }
        }
    }
    async delayTime(e) {
        return new Promise((a, t) => {
            setTimeout(() => {
                a("延迟");
            }, e);
        });
    }
    test_music(a) {
        a.$data.test_flag < a.$data.music_info_test.length - 1 ? (a.$data.music_info[a.$data.test_flag] = a.$data.music_info_test[a.$data.test_flag], 
        console.log(a.$data.test_flag), console.log(a.$data.music_info), a.$data.test_flag++) : clearInterval();
    }
    async test_lyric(a) {
        let t = 0, e = 0;
        this.n = 2 * (parseInt(a.$data.v_li_margin) + parseInt(a.$data.li_height));
        var s = [ [ 2, 6 ], [ 6, 8 ], [ 8, 11 ], [ 11, 14 ], [ 14, 15 ], [ 15, 20 ], [ 20, 25 ], [ 25, 30 ], [ 30, 35 ], [ 35, 40 ], [ 40, 45 ], [ 45, 50 ], [ 50, 55 ], [ 55, 60 ], [ 60, 65 ], [ 65, 70 ], [ 70, 75 ], [ 75, 80 ], [ 80, 85 ], [ 85, 90 ], [ 90, 95 ], [ 95, 100 ], [ 100, 105 ], [ 105, 110 ], [ 110, 115 ], [ 115, 120 ], [ 120, 125 ], [ 125, 130 ], [ 130, 135 ], [ 135, 140 ], [ 140, 145 ], [ 145, 150 ] ];
        for (let a = 0; a < 155 && (await this.delayTime(1e3), !this.global_time_break_flag); a++) console.log(a), 
        t = this.show_now_lyric(t, s.length, s, e), e++;
        this.global_time_break_flag || await this.test_lyric(a), this.global_time_break_flag = !1;
    }
    async delay_timer(a, t, e) {
        for (let a = t; 0 < a; a--) a = this.global_time--, console.log(a), await this.delayTime(1e3);
        this.use_get(a, e), this.global_time_flag = !0;
    }
    delay_post_setting(a, t, e) {
        this.global_time = t, this.global_time_flag && (this.change_load_info(a, !0, "load"), 
        this.delay_timer(a, t, e).then(() => {})), this.global_time_flag = !1;
    }
    reset_own_database(t, a) {
        $.getJSON("/reset_own_database", {
            where_url: a,
            url: t.$data.url
        }, a => {
            a ? t.$data.mask2_1 = !0 : t.$data.mask2_2 = !0;
        });
    }
    copy_content(t, e, a) {
        navigator.clipboard.writeText(a).then(a => {
            console.log(a), console.log("复制成功"), this.change_load_info(t, !0, "copy_sus");
        }).catch(a => {
            console.log(a), $(e).select();
            try {
                document.execCommand("copy"), this.change_load_info(t, !0, "copy_sus");
            } catch (a) {
                this.change_load_info(t, !0, "copy_fail");
            }
        });
    }
    change_load_info(a, t, e, s = "") {
        switch (a.$data.load_info_flag = t, e) {
          case "sus":
            a.$data.load_info_icon = "check", a.$data.load_info = "设置已保存";
            break;

          case "fail":
            a.$data.load_info_icon = "close", a.$data.load_info = "提交失败 原因: " + s;
            break;

          case "load":
            a.$data.load_info_icon = "loading", a.$data.load_info = "正在提交设置，请勿切换页面";
            break;

          case "copy_sus":
            a.$data.load_info_icon = "check", a.$data.load_info = "已复制到剪切板";
            break;

          case "copy_fail":
            a.$data.load_info_icon = "close", a.$data.load_info = "复制失败";
        }
        e && this.delayTime(3e3).then(() => {
            this.change_load_info(a, !1, "");
        });
    }
    get_qq_playlist(s) {
        $.getJSON("get-qq-playlist", {
            url: s.$data.url,
            where_url: s.$data.who_i_am ? "lyric_url" : "music_url"
        }, a => {
            console.log(a);
            var t = a.data.disslist;
            for (let a = 1; a < t.length; a++) {
                var e = t[a];
                console.log("list_name: %s, id: %s", e.diss_name, e.tid), s.$data.playlist_name.push({
                    tid: e.tid,
                    name: e.diss_name,
                    song_count: e.song_cnt,
                    platform_text: "QQ音乐",
                    platform: "qq",
                    cover: "?n=1" === e.diss_cover ? "" : e.diss_cover
                });
            }
        });
    }
    get_qq_playlist_info(a) {
        $.getJSON("get-qq-playlist-info", {
            playlist_id: a.$data.playlist_id
        }, a => {
            console.log(a);
        });
    }
    get_cloud_playlist(s) {
        $.getJSON("get-cloud-playlist", {
            url: s.$data.url,
            where_url: s.$data.who_i_am ? "lyric_url" : "music_url"
        }, a => {
            console.log(a);
            for (const e of a.playlist) {
                var t = {
                    tid: e.id,
                    name: e.name,
                    song_count: e.trackCount,
                    platform_text: "网易云",
                    platform: "cloud",
                    cover: "?n=1" === e.coverImgUrl ? "" : e.coverImgUrl
                };
                s.$data.playlist_name.push(t);
            }
        });
    }
    get_all_playlist(a) {
        this.get_qq_playlist(a), this.get_cloud_playlist(a);
    }
    load_playlist_to_database(a) {
        setTimeout(() => {
            $.getJSON("load-playlist-to-database", {
                url: a.$data.url,
                where_url: a.$data.where + "_url",
                platform: a.$data.playlist_platform,
                overwrite: a.$data.playlist_overwrite,
                playlist_id: a.$data.playlist_id
            });
        }, 1e3);
    }
    set_idle_playlist(t, a, e) {
        t.$data.idle_playlist = [], $("[name='use_playlist']:eq(0)").prop("checked", e.user_playlist.status);
        for (const l of e.user_playlist.playlist) {
            let a = "";
            var [ s, _ ] = l.file_name;
            switch (l.platform) {
              case "qq":
                a = "QQ音乐";
                break;

              case "cloud":
                a = "网易云";
                break;

              case "ku_wo":
                a = "酷我";
                break;

              default:
                a = "未定义";
            }
            t.$data.idle_playlist.push({
                name: s,
                artist: _,
                platform_text: a
            });
        }
    }
    start_getting(t) {
        var a = {
            url: t.$data.url,
            where: t.$data.where
        };
        t.$data.start_flag ? (a.data = 0, $.get("start_dan_mu", a, a => {
            "id" !== a.data && "key" !== a.data && (t.$data.start_getting_text = "开始统计", 
            t.$data.start_flag = !1);
        })) : (a.data = 1, $.getJSON("start_dan_mu", a, a => {
            "id" !== a.data && "key" !== a.data && (t.$data.start_getting_text = "停止统计", 
            t.$data.start_flag = !0);
        }));
    }
    change_who_play(a) {
        var t = $("[name='switch']:eq(0)").prop("checked");
        this.update_play_data(a, "who_play", Number(!t));
    }
    use_playlist(a) {
        var t = $("[name='use_playlist']:eq(0)").prop("checked");
        this.update_play_data(a, "use_playlist", Number(t));
    }
    play_pause(a) {
        a.$data.play_icon_flag = a.$data.play_icon_flag ? 0 : 1, this.update_play_data(a, "play", a.$data.play_icon_flag);
    }
    replay_music(a) {
        this.update_play_data(a, "replay", 1);
    }
    update_play_data(a, t, e) {
        e = {
            url: a.$data.url,
            data: e,
            where: t,
            where_url: a.$data.where + "_url"
        };
        $.get("play", e);
    }
    next_music(a) {
        a = {
            url: a.$data.url,
            where: a.$data.where
        };
        $.get("next_music", a);
    }
    delete_music(a, t, e, s) {
        s = {
            url: a.$vm.url,
            data: a.$vm.play_icon_flag,
            artist: s,
            where_url: a.$vm.where + "_url",
            music_name: e
        };
        $.get("del_music", s);
    }
    move_music(a, t, e, s, _) {
        _ = {
            url: a.$vm.url,
            data: a.$vm.play_icon_flag,
            index: _,
            artist: s,
            where_url: a.$vm.where + "_url",
            music_name: e
        };
        $.get("move_music", _);
    }
    display_operation(a) {
        $(a).css("display", "flex");
    }
    hidden_operation(a) {
        $(a).css("display", "none");
    }
    change_bili_scroll_flag(a, t) {
        a.$data.scroll_flag = t;
    }
    get_music_info(d) {
        $.getJSON("/get_data", {
            url: d.$data.url,
            where: d.$data.where
        }, a => {
            console.log(a);
            let t, e;
            var s = a.data.music_name_list, _ = a.data.who_play, l = a.data.is_running;
            d.$data.console_info = a.data.console_info, d.$data.play_icon_flag = a.data.play_;
            try {
                t = [ s.shift() ];
            } catch (a) {
                t = [];
            }
            if (t.equals([ void 0 ]) && (t = []), _ ? $("[name='switch']:eq(0)").prop("checked", !1) : $("[name='switch']:eq(0)").prop("checked", !0), 
            l ? ($("#start_dan_mu").text("停止统计"), d.$data.start_flag = !0) : ($("#start_dan_mu").text("开始统计"), 
            d.$data.start_flag = !1), s.equals(d.$data.last_list) || (d.$data.last_list = s, 
            d.$data.music_list = s), !t.equals(d.$data.last)) {
                d.$data.last = t, e = d.$data.last.equals([]) || d.$data.last.equals([ [ "", "" ] ]) ? '<li><span class="music-name">暂无歌曲</span><span class="artist">暂无</span></li>' : '<li><span class="music-name">' + t[0][0] + '</span><span class="artist">' + t[0][1] + "</span></li>";
                var o = document.getElementById("u"), i = o.childNodes;
                for (let a = i.length - 1; 0 <= a; a--) o.removeChild(i[a]);
                o.innerHTML = e;
            }
        });
    }
    on_wss(a, t, e) {
        var s, _, l, o;
        "LIVE_OPEN_PLATFORM_DM" === a.cmd && (s = e[0], _ = e[1], e = e[2], {
            music_name: a,
            artist: l,
            status: o
        } = t.my_filter(s, a), s.$data.start_flag && o && ("music_url" === e ? 0 === s.$data.who_i_am : 1 === s.$data.who_i_am) ? t.send_to_server(a, l, _, e) : console.log("stop\n" + a + ": " + l));
    }
    my_filter(a, t) {
        var e = t.data.uid, s = t.data.msg, _ = t.data.uname;
        t.data.guard_level, t.data.fans_medal_name, t.data.fans_medal_level, t.data.fans_medal_wearing_status;
        let l, o = s.split("#")[0].split(" ");
        t = o.shift();
        let i, d;
        if (console.log("comment: " + o + "\ncommand: " + t), "点歌" === t || "." === t) {
            l = !0, void 0 === (o = (o = o.join(" ")).split("&"))[1] && (o = o[0].split("＆")), 
            console.log(o), i = $.trim(o[0]), d = $.trim(o[1]), console.log("music_name: " + i + "\nartist: " + d);
            for (const n of a.$data.black_user_list) {
                try {
                    e === parseInt(n.uid) && (l = !1);
                } catch (a) {
                    console.log("no uid");
                }
                try {
                    _.toUpperCase() === n.nick && (l = !1);
                } catch (a) {
                    console.log("no uname");
                }
            }
            for (const r of a.$data.black_music_list) {
                try {
                    i.toUpperCase() === r.music_name.toUpperCase() && (l = !1);
                } catch (a) {}
                try {
                    d.toUpperCase() === r.artist.toUpperCase() && (l = !1);
                } catch (a) {}
            }
        } else l = !1;
        return {
            music_name: i,
            artist: d,
            status: l
        };
    }
    send_to_server(a, t, e, s) {
        $.get("move_music", {
            index: -1,
            url: e,
            artist: t,
            where_url: s,
            music_name: a
        });
    }
}